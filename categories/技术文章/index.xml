<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术文章 on Chieh Blog</title>
    <link>http://do-chieh.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/</link>
    <description>Recent content in 技术文章 on Chieh Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 08 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://do-chieh.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Protocol Buffer Objerctive-C Compiler(protoc)</title>
      <link>http://do-chieh.github.io/post/2017/1704-protobuf-objc/</link>
      <pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://do-chieh.github.io/post/2017/1704-protobuf-objc/</guid>
      <description>什么是Protocol buffers?  Protocol buffers are a language-neutral, platform-neutral extensible mechanism for serializing structured data.
 Protocol buffers 是一种以有效且可扩展的格式对结构化数据进行编码的方式。它和xml类似，但是比xml更轻量，更快速，更简单。
你可以定义自己想要的结构化数据，然后可以使用特殊的生成源代码轻松地将结构化数据写入和读取各种数据流并使用各种语言。
Protocol buffers项目的主页在这里。
开发指南在这里。
Objective-C Protocol Buffers 实现需要以下环境:
 Objective C 2.0 Runtime (32bit &amp;amp; 64bit iOS, 64bit OS X). Xcode 7.0 (or later). 出于性能考虑，代码没有使用ARC。  安装 Protobuf 可以通过brew和source code 两种方式安装。
在这里，我推荐使用源代码安装。到这里选择发行的版本。 我选择安装的是3.2版本，与公司项目中使用的2.0+版本有很大的区别。
protobuf的安装依赖automake,libtool。确保它们在系统中存在。
brew install automake brew install libtool  homebrew可以到这里找到如何安装。
将压缩包解压到指定的安装目录，开始编译protoc：
cd &amp;lt;install_directory&amp;gt; ./autogen.sh ./configure make  如果运行没有错误的话，protoc将会出现在 &amp;lt;install_directory&amp;gt;/src 中。</description>
    </item>
    
    <item>
      <title>Hexo常用的内置标签记录</title>
      <link>http://do-chieh.github.io/post/2016/1610-hexo-tag/</link>
      <pubDate>Sat, 15 Oct 2016 15:58:42 +0000</pubDate>
      
      <guid>http://do-chieh.github.io/post/2016/1610-hexo-tag/</guid>
      <description>Hexo 标签 「标签」(Tag Plugin) 是 Hexo 提供的一种快速生成特定内容的方式。 在标准 Markdown 中，我们无法指定图片的大小，在这种情景下，我们即可使用标签来解决。 Hexo 内置来许多标签来帮助写作者可以更快的书写， 完整的标签列表 可以参考 Hexo 官网。
文本居中的引用 此标签将生成一个带上下分割线的引用，同时引用内文本将自动居中。 文本居中时，多行文本若长度不等，视觉上会显得不对称，因此建议在引用单行文本的场景下使用。 例如作为文章开篇引用 或者 结束语之前的总结引用。
使用方式  HTML方式：使用这种方式时，给 img 添加属性 class=&amp;ldquo;blockquote-center&amp;rdquo; 即可。 标签方式：使用 centerquote 或者 简写 cq。 此标签要求 NexT 的版本在 0.4.5 或以上。 若你正在使用的版本比较低，可以选择使用 HTML 方式。  标调用方法签 ** HTML方式 ** 如若你非我不嫁 彼此终必火化 一生一世等一天需要代价 
** 标签方式 **
{% blockquote [author[, source]] [link] [source_link_title] %} content {% endblockquote %}  Examples 1: No arguments.</description>
    </item>
    
    <item>
      <title>使用hexo写作</title>
      <link>http://do-chieh.github.io/post/2016/1610-hexo/</link>
      <pubDate>Sun, 02 Oct 2016 16:23:11 +0000</pubDate>
      
      <guid>http://do-chieh.github.io/post/2016/1610-hexo/</guid>
      <description>新建文章 $ hexo new [layout] &amp;lt;title&amp;gt;  布局（Layout） Hexo 的三种默认布局：post、page、draft, 可以通过 _config.yml中的default_layout 来指定默认布局。它们分别对应不同的路径，如果自定义了布局，将与post相同， 存储在 source/_posts 文件夹。
   布局 路径     post source/_posts   page source   draft source/_drafts    添加分类目录 hexo new page &amp;quot;categories&amp;quot;  这时会在source下生成目录categories，里面有个index.md文件
编辑index.md，设置type 值为 categories
title: categories date: 2016-12-09 15:59:21 type: &amp;quot;categories&amp;quot; comments: false  这样页面就会显示所有的分类了。
添加 tags 页面 tags同categories 设置, 将type 改为tags即可。
草稿 新建的文章默认使用 post 布局，如果不想立即发布文章可以先存草稿，这时候文件将会被保存在 source/_drafts中，</description>
    </item>
    
  </channel>
</rss>